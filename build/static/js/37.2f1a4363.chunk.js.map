{"version":3,"sources":["pages/FAQ_Management/FAQ_Management.js"],"names":["useStyles","makeStyles","theme","root","flexWrap","margin","spacing","extendedIcon","marginRight","paperHeading","padding","table","minWidth","textMiddle","verticalAlign","iconMargin","color","backgroundColor","iconcolor","headingButton","display","flexDirection","justifyContent","headingAlignment","alignItems","width","gap","textAlign","Marginbutton","container","paperPaddingRightLeft","FAQ_Management","props","classes","useState","tableData","setTableData","setButtonDisabling","storeType","setType","state","location","useEffect","getCategoriesContent","type","a","console","log","axios","post","faq_type","data","handleUpdate","values","_id","id","question","answer","createdFor","toast","success","message","position","POSITION","TOP_RIGHT","handle_Deletion","window","confirm","delete","Fragment","className","elevation","style","classNames","defaultValue","label","value","options","onChange","e","title","fontSize","arrow","onClick","history","push","pathname","map","category","index","key","initialValues","get","validate","errors","onSubmit","setSubmitting","setTimeout","isSubmitting","setFieldValue","expandIcon","aria-controls","dangerouslySetInnerHTML","__html","variant"],"mappings":"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","file":"static/js/37.2f1a4363.chunk.js","sourcesContent":["import React, { useState, useEffect, Component, useRef, useContext } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport classNames from \"classnames\";\r\nimport axios from \"../../axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n// import Switch from '@mui/material/Switch';\r\n// import { styled } from '@mui/material/styles';\r\n// import Skeleton from 'react-loading-skeleton'\r\n// import 'react-loading-skeleton/dist/skeleton.css'\r\nimport {\r\n  Button,\r\n  IconButton,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TablePagination,\r\n  Switch,\r\n  styled,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport \"./FAQ_Management.css\";\r\n// import { Delete } from '@material-ui/icons';\r\n// import VisibilityIcon from '@material-ui/icons/Visibility';\r\n// import BlockIcon from '@material-ui/icons/Block';\r\n// import ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n\r\n// For Table\r\n// import SearchBar from \"material-ui-search-bar\";\r\n// import { orderBy } from \"lodash\";\r\n\r\n//history\r\n// import {useHistory} from 'react-router-dom'\r\n// import AddEditCategory from \"../AccountManagement/Account_Details\";\r\n\r\n// import './Category_Management.css' ;\r\n// import EditIcon from '@material-ui/icons/Edit';\r\n// import { DeleteOutline, WidgetsOutlined } from \"@material-ui/icons\";\r\n// import React, { Component } from 'react';\r\n// import { Editor } from 'react-draft-wysiwyg';\r\n// import { EditorState, convertToRaw, ContentState } from 'draft-js';\r\n// import draftToHtml from 'draftjs-to-html';\r\n// import htmlToDraft from 'html-to-draftjs';\r\n// import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\n// import '../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\n// import QNA from \"./QNA_Component\";\r\nimport JoditEditor from \"jodit-react\";\r\nimport { Formik, Field, ErrorMessage, Form } from \"formik\";\r\nimport { get } from \"lodash\";\r\nimport RSelect from \"react-select\";\r\nimport { DeleteOutline, WidgetsOutlined } from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexWrap: \"wrap\",\r\n    // marginTop: '5rem',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  paperHeading: {\r\n    padding: \"1rem 0rem\",\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  textMiddle: {\r\n    verticalAlign: \"middle !important\",\r\n  },\r\n  iconMargin: {\r\n    margin: \"0.5rem\",\r\n    color: \"#fff\",\r\n    backgroundColor: \"#696969\",\r\n  },\r\n  iconcolor: {\r\n    margin: \"0.5rem\",\r\n    color: \"#fff\",\r\n    backgroundColor: \"#0e3f37 !important\",\r\n  },\r\n  headingButton: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n    padding: \"10px\",\r\n  },\r\n  headingAlignment: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    // padding: \"0 2rem 0 2rem\"\r\n    alignItems: \"center\",\r\n    flexWrap: \"wrap\",\r\n    [\"@media (max-width:780px)\"]: {\r\n      // eslint-disable-line no-useless-computed-key\r\n      flexDirection: \"column\",\r\n      width: \"100%\",\r\n      gap: \"1rem\",\r\n      justifyContent: \"center\",\r\n      textAlign: \"center\",\r\n    },\r\n  },\r\n  Marginbutton: {\r\n    margin: \"0.5rem\",\r\n  },\r\n  container: {\r\n    // maxHeight: \"58vh\",\r\n  },\r\n  paperPaddingRightLeft: {\r\n    padding: \"0rem 1rem\",\r\n  },\r\n}));\r\n\r\nexport default function FAQ_Management(props) {\r\n  const classes = useStyles();\r\n  // const registrationForm = useRef();\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n  // const [inputData, setInputData] = useState(\"\");\r\n  // const [inputData2, setInputData2] = useState(\"\");\r\n\r\n  // const [inputquestion, setInputquestion] = useState(\"\");\r\n  // const [inputquestion2, setInputquestion2] = useState(\"\");\r\n  const [buttonDisabling, setButtonDisabling] = useState(false);\r\n\r\n  const [storeType, setType] = useState(\"USER\");\r\n  //   const [tabColor, setTabColor] = useState(\"1\");\r\n\r\n  const [show, setShow] = useState(true);\r\n  const {\r\n    location: { state },\r\n  } = props;\r\n  useEffect(() => {\r\n    !state ? getCategoriesContent(\"USER\") : getCategoriesContent(state);\r\n    //  setInputData2(\"\");\r\n  }, []);\r\n\r\n  //get content\r\n  const getCategoriesContent = async (type) => {\r\n    console.log(\"type\", type);\r\n    setType(type);\r\n\r\n    try {\r\n      if (type === \"USER\") {\r\n        setTableData([]);\r\n        const { data } = await axios.post(`/private/faqList`, { faq_type: \"user\" });\r\n        console.log(data);\r\n        setTableData(data.data);\r\n\r\n        setButtonDisabling(false);\r\n        // setSearchedData(data.user)\r\n        // setIsLoading(false)\r\n      } else if (type === \"DRIVER\") {\r\n        setTableData([]);\r\n        const { data } = await axios.post(`/private/faqList`, { faq_type: \"driver\" });\r\n        console.log(data);\r\n        setTableData(data.data);\r\n\r\n        setButtonDisabling(false);\r\n      }\r\n      // else if (type === \"DRIVER\") {\r\n      //   setTableData([]);\r\n      //   const { data } = await axios.get(`/user/getFaqByPanel?panel=DRIVER`);\r\n      //   console.log(data);\r\n      //   setTableData(data.data);\r\n\r\n      //   setButtonDisabling(false);\r\n      // }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  console.log(tableData);\r\n\r\n  const handleUpdate = async (values) => {\r\n    // console.log(category);\r\n    // if (category){\r\n    try {\r\n      setButtonDisabling(true);\r\n      const { data } = await axios.post(\"/admin/updateFaq\", {\r\n        _id: values.id,\r\n        question: values.question,\r\n        answer: values.answer,\r\n        createdFor: storeType,\r\n      });\r\n\r\n      // window.location.reload();\r\n      // getCategoriesContent();\r\n      toast.success(data.message, {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  const handleAdd = async (values) => {\r\n    try {\r\n      setButtonDisabling(true);\r\n      // let panelName = \"USER\";\r\n\r\n      const { data } = await axios.post(\"/admin/createFaq\", {\r\n        // _id: category.data._id,\r\n        question: values.newQuestion,\r\n        answer: values.newAnswer,\r\n        createdFor: storeType,\r\n      });\r\n\r\n      // window.location.reload();\r\n      getCategoriesContent(storeType);\r\n      setTimeout(() => {\r\n        setShow(true);\r\n      }, 401);\r\n      toast.success(data.message, {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handle_Deletion = async (id) => {\r\n    if (window.confirm(\"Are you sure you want to delete this faq?\")) {\r\n      try {\r\n        const { data } = await axios.delete(`/private/faqDelete/${id}`);\r\n        // window.location.reload();\r\n\r\n        toast.success(data.message, {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n        getCategoriesContent(storeType);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    } else {\r\n    }\r\n  };\r\n  const options = [\r\n    { value: \"USER\", label: \"USER\" },\r\n    { value: \"DRIVER\", label: \"DRIVER\" },\r\n    // { value: \"DRIVER\", label: \"DRIVER\" },\r\n  ];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className={classes.root}>\r\n          <Paper elevation={0} style={{ backgroundColor: \"transparent\" }}>\r\n            <div className={classes.paperPaddingRightLeft}>\r\n              <div className=\"\">\r\n                <Paper\r\n                  elevation={0}\r\n                  style={{ backgroundColor: \"transparent\" }}\r\n                  className={classNames(classes.paperHeading, classes.headingAlignment)}\r\n                >\r\n                  <h3 style={{}}></h3>\r\n                  <div style={{ width: \"20%\" }}>\r\n                    <RSelect\r\n                      defaultValue={\r\n                        !state\r\n                          ? { label: \"USER\", value: \"USER\" }\r\n                          : {\r\n                              label: state === \"DRIVER\" ? \"DRIVER\" : \"USER\",\r\n                              value: state === \"DRIVER\" ? \"DRIVER\" : \"USER\",\r\n                            }\r\n                      }\r\n                      options={options}\r\n                      onChange={(e) => {\r\n                        getCategoriesContent(e.value);\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  {/* <Button\r\n                    variant=\"contained\"\r\n                    className=\"buttoncss\"\r\n                    style={{ backgroundColor: \"#0059cd\", color: \"#fff\" }}\r\n                    onClick={() => {\r\n                      props.history.push({\r\n                        pathname: \"/adminPanel/AddEditFAQ\",\r\n                        state: [storeType, \"ADD FAQ\"],\r\n                      });\r\n                    }}\r\n                  >\r\n                    Add FAQ\r\n                  </Button> */}\r\n                  <Tooltip title={<span style={{ color: \"white\", fontSize: \"16px\" }}>Add FAQ</span>} arrow>\r\n                    <IconButton\r\n                      className=\"buttoncss\"\r\n                      style={{ backgroundColor: \"#0059cd\", color: \"#fff\" }}\r\n                      onClick={() => {\r\n                        props.history.push({\r\n                          pathname: \"/adminPanel/AddEditFAQ\",\r\n                          state: [storeType, \"ADD FAQ\"],\r\n                        });\r\n                      }}\r\n                    >\r\n                      <AddIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Paper>\r\n                <Paper elevation={0} style={{ backgroundColor: \"transparent\" }}>\r\n                  <div>\r\n                    {/* <Button variant=\"contained\" style={{ backgroundColor: '#0e3f37', color: \"white\" }}  onClick={()=>{getCategoriesContent(\"all\")}}>All</Button>&emsp; */}\r\n                    {/* <Button\r\n                      variant=\"contained\"\r\n                      className={`${\r\n                        tabColor === \"1\" ? \"customButton\" : \"defaultButton\"\r\n                      }`}\r\n                      onClick={() => {\r\n                        getCategoriesContent(\"price\");\r\n                        setTabColor(\"1\");\r\n                      }}\r\n                    >\r\n                      Price\r\n                    </Button>\r\n                    &emsp;\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      className={`${\r\n                        tabColor === \"2\" ? \"customButton\" : \"defaultButton\"\r\n                      }`}\r\n                      onClick={() => {\r\n                        setTabColor(\"2\");\r\n                        getCategoriesContent(\"service\");\r\n                      }}\r\n                    >\r\n                      Service\r\n                    </Button> */}\r\n                  </div>\r\n                </Paper>\r\n                {/* //new design */}\r\n\r\n                {/* <br /> */}\r\n\r\n                {/* status end */}\r\n\r\n                <Paper>\r\n                  {tableData.map((category, index) => (\r\n                    <Formik\r\n                      key={index}\r\n                      initialValues={{\r\n                        question: get(category, \"question\", \"\"),\r\n                        answer: get(category, \"answer\", \"\"),\r\n                        id: get(category, \"_id\", \"\"),\r\n                      }}\r\n                      validate={(values) => {\r\n                        const errors = {};\r\n                        console.log(values);\r\n                        if (!values.question) {\r\n                          errors.question = \"Required\";\r\n                        }\r\n                        if (\r\n                          //  !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n                          values.answer === \"\" ||\r\n                          values.answer === \"<p><br></p>\"\r\n                        ) {\r\n                          errors.answer = \"Required\";\r\n                        }\r\n                        return errors;\r\n                      }}\r\n                      onSubmit={(values, { setSubmitting }) => {\r\n                        setTimeout(() => {\r\n                          //  alert(JSON.stringify(values, null, 2));\r\n                          handleUpdate(values);\r\n                          setSubmitting(false);\r\n                        }, 400);\r\n                      }}\r\n                    >\r\n                      {({ isSubmitting, setFieldValue, values }) => (\r\n                        <Form>\r\n                          <Accordion>\r\n                            <AccordionSummary\r\n                              expandIcon={<ExpandMoreIcon />}\r\n                              aria-controls=\"panel1a-content\"\r\n                              id=\"panel1a-header\"\r\n                              className=\"my-2\"\r\n                            >\r\n                              <Typography>\r\n                                {\" \"}\r\n                                <strong>Question:</strong>&emsp;\r\n                              </Typography>\r\n                              <Typography>\r\n                                {/* <Field\r\n                                  type=\"text\"\r\n                                  name=\"question\"\r\n                                  className=\"form-control\"\r\n                                  placeholder=\"Question\"\r\n                                /> */}\r\n                                {values.question}\r\n                              </Typography>\r\n                            </AccordionSummary>\r\n                            <AccordionDetails>\r\n                              <Typography>\r\n                                {/* <label className=\"label-text\">QUESTION</label> */}\r\n                                {/*                            \r\n                                <ErrorMessage\r\n                                  name=\"question\"\r\n                                  component=\"div\"\r\n                                  className=\"text-danger\"\r\n                                /> */}\r\n                                {/* <div className=\"editor-container-1\"> */}\r\n                                {/* <label className=\"label-text\">ANSWER</label> */}\r\n                                {/* <JoditEditor\r\n                                    value={values.answer}\r\n                                    name=\"answer\"\r\n                                    // onChange={(newContent) => {\r\n                                    //   // SettingData(newContent);\r\n                                    //   setFieldValue(\"answer\", newContent);\r\n                                    // }}\r\n                                    disabled\r\n                                  /> */}\r\n                                {/* </div> */}\r\n                                {/* <ErrorMessage\r\n                                  name=\"answer\"\r\n                                  component=\"div\"\r\n                                  className=\"text-danger\"\r\n                                /> */}\r\n                                <strong>Answer :</strong>\r\n                                <div\r\n                                  dangerouslySetInnerHTML={{\r\n                                    __html: values.answer,\r\n                                  }}\r\n                                />\r\n                                <br />\r\n                                <Button\r\n                                  variant=\"contained\"\r\n                                  style={{\r\n                                    backgroundColor: \"#0059cd\",\r\n                                    color: \"white\",\r\n                                  }}\r\n                                  // onClick={()=>{\r\n                                  //   handleCreate_Update2(category)\r\n                                  // }}\r\n                                  // type=\"submit\"\r\n                                  // disabled={isSubmitting}\r\n                                  onClick={() => {\r\n                                    props.history.push({\r\n                                      pathname: \"/adminPanel/AddEditFAQ\",\r\n                                      state: [storeType, \"EDIT FAQ\", category],\r\n                                    });\r\n                                  }}\r\n                                >\r\n                                  <EditIcon />\r\n                                </Button>\r\n                                &emsp;\r\n                                <Button\r\n                                  variant=\"contained\"\r\n                                  type=\"button\"\r\n                                  style={{\r\n                                    backgroundColor: \"#0059cd\",\r\n                                    color: \"white\",\r\n                                  }}\r\n                                  onClick={() => {\r\n                                    handle_Deletion(category._id);\r\n                                    // getCategoriesContent(storeType);\r\n                                  }}\r\n                                >\r\n                                  <DeleteOutline />\r\n                                </Button>\r\n                                <br />\r\n                                <br />\r\n                              </Typography>\r\n                            </AccordionDetails>\r\n                          </Accordion>\r\n                        </Form>\r\n                      )}\r\n                    </Formik>\r\n                  ))}\r\n\r\n                  {/* {show && (\r\n                    <Formik\r\n                      initialValues={{\r\n                        newQuestion: \"\",\r\n                        newAnswer: \"\",\r\n                      }}\r\n                      validate={(values) => {\r\n                        const errors = {};\r\n                        console.log(values);\r\n                        if (!values.newQuestion) {\r\n                          errors.newQuestion = \"Required\";\r\n                        }\r\n                        if (\r\n                          //  !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n                          values.newAnswer === \"\" ||\r\n                          values.newAnswer === \"<p><br></p>\"\r\n                        ) {\r\n                          errors.newAnswer = \"Required\";\r\n                        }\r\n                        return errors;\r\n                      }}\r\n                      onSubmit={(values, { setSubmitting }) => {\r\n                        setTimeout(() => {\r\n                          //  alert(JSON.stringify(values, null, 2));\r\n                          handleAdd(values);\r\n\r\n                          setSubmitting(false);\r\n                        }, 400);\r\n\r\n                        //  getCategoriesContent(storeType);\r\n                        // window.location.reload();\r\n                        setShow(false);\r\n                      }}\r\n                    >\r\n                      {({ isSubmitting, setFieldValue, values }) => (\r\n                        <Form>\r\n                          <label className=\"label-text\">QUESTION</label>\r\n                          <Field\r\n                            type=\"text\"\r\n                            name=\"newQuestion\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"New Question\"\r\n                          />\r\n                          <ErrorMessage\r\n                            name=\"newQuestion\"\r\n                            component=\"div\"\r\n                            className=\"text-danger\"\r\n                          />\r\n                          <br />\r\n                          <div className=\"editor-container-1\">\r\n                            <label className=\"label-text\">ANSWER</label>\r\n                            <JoditEditor\r\n                              value={values.newAnswer}\r\n                              name=\"newAnswer\"\r\n                              onChange={(newContent) => {\r\n                                // SettingData(newContent);\r\n                                setFieldValue(\"newAnswer\", newContent);\r\n                              }}\r\n                            />\r\n                          </div>\r\n                          <ErrorMessage\r\n                            name=\"newAnswer\"\r\n                            component=\"div\"\r\n                            className=\"text-danger\"\r\n                          />\r\n                          <br />\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            type=\"submit\"\r\n                            // style={{ backgroundColor: `${buttonDisabling?'#696969':'#0e3f37'}`, color: \"white\" }}\r\n                            // onClick={()=>{handleAdd()}}\r\n                            style={{\r\n                              backgroundColor: \"#0e3f37\",\r\n                              color: \"white\",\r\n                            }}\r\n                            disabled={isSubmitting}\r\n                          >\r\n                            ADD\r\n                          </Button>\r\n                          <br />\r\n                          <br />\r\n                        </Form>\r\n                      )}\r\n                    </Formik>\r\n                  )} */}\r\n                </Paper>\r\n              </div>\r\n            </div>\r\n          </Paper>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n"],"sourceRoot":""}