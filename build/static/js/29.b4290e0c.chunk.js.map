{"version":3,"sources":["helpers/helperFunction.js","pages/UserManagement/UserManagement.js"],"names":["getDateFormat","startDate","endDate","undefined","newData","Date","newData1","sDate","getFullYear","getMonth","getDate","eDate","useStyles","makeStyles","theme","root","flexWrap","margin","spacing","extendedIcon","marginRight","paperHeading","padding","table","minWidth","textMiddle","verticalAlign","iconMargin","color","backgroundColor","iconcolor","headingButton","display","flexDirection","justifyContent","headingAlignment","alignItems","width","gap","textAlign","Marginbutton","container","paperPaddingRightLeft","styled","Switch","borderRadius","content","position","top","transform","height","backgroundImage","encodeURIComponent","palette","getContrastText","primary","main","left","right","boxShadow","UserManagement","props","classes","state","location","history","useState","setSearchedValue","rselKey","setRselKey","tableData","setTableData","setStartDate","setEndDate","isLoading","setIsLoading","open","setOpen","all","select","date","applyFilter","setApplyFilter","setShowView","selectedProfile","setSelectedProfile","applyButtonColor","setApplyButtonColor","React","page","setPage","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","a","FormatedDate","console","log","getCategoriesContent","Incomplete","search","totalUserListCount","settotalUserListCount","limit","setLimit","setIncomplete","setSearch","axios","get","data","docs","setSearchedData","totalDocs","length","status","UserCategoryData","setUserCategoryData","BlockUser","id","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","toast","success","POSITION","TOP_RIGHT","error","UnblockUser","DeleteUser","useEffect","k","SearchUser","call","timer","d","args","clearTimeout","setTimeout","myDeb","toLowerCase","ViewUserDetails","apiHit","pathname","push","_id","serviceType","selected","setSelected","Fragment","className","elevation","style","onChange","searchVal","onCancelSearch","placeholder","inputProps","maxLength","zIndex","key","options","label","value","defaultValue","isSearchable","e","dateFormat","maxDate","minDate","variant","onClick","info","fontSize","arrow","post","userIds","all_delete","userType","minHeight","stickyHeader","size","indeterminate","checked","newSelecteds","map","n","fontWeight","category","index","name","rating","isItemSelected","indexOf","hover","selectedIndex","newSelected","concat","slice","handleClick","role","tabIndex","component","scope","createdAt","getUTCDate","getUTCMonth","getUTCFullYear","textTransform","username","userCategory","cursor","language","filterLanguageValue","test","toFixed","whiteSpace","userProfileUpdate","disabled","isBlock","TextToDisplay","Loading","bottom","rowsPerPageOptions","count","onPageChange","onRowsPerPageChange","target","parseInt","fullWidth","initialValues","business_name","business_phone","business_email","business_address","values","setFieldValue","type","autoComplete","borderColor","borderStyle","borderWidth","paddingInlineStart","readOnly"],"mappings":"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","file":"static/js/29.b4290e0c.chunk.js","sourcesContent":["export const getDateFormat = (startDate, endDate) => {\r\n  if (\r\n    startDate !== null &&\r\n    endDate !== null &&\r\n    startDate !== \"\" &&\r\n    endDate !== \"\" &&\r\n    startDate !== undefined &&\r\n    endDate !== undefined\r\n  ) {\r\n    let newData = new Date(startDate);\r\n    let newData1 = new Date(endDate);\r\n    let sDate = newData.getFullYear() + \"-\" + (newData.getMonth() + 1) + \"-\" + newData.getDate();\r\n    let eDate = newData1.getFullYear() + \"-\" + (newData1.getMonth() + 1) + \"-\" + newData1.getDate();\r\n\r\n    return {\r\n      sDate,\r\n      eDate,\r\n    };\r\n  } else {\r\n    let sDate = \"\";\r\n    let eDate = \"\";\r\n    return {\r\n      sDate,\r\n      eDate,\r\n    };\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport classNames from \"classnames\";\r\nimport axios from \"../../axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport moment from \"moment\";\r\n// import Switch from '@mui/material/Switch';\r\n// import { styled } from '@mui/material/styles';\r\n// import Skeleton from 'react-loading-skeleton'\r\n// import 'react-loading-skeleton/dist/skeleton.css'\r\nimport { Close, DeleteForeverOutlined, DeleteOutlineOutlined, Search } from \"@material-ui/icons\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { getDateFormat } from \"../../helpers/helperFunction\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport {\r\n  Button,\r\n  IconButton,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TablePagination,\r\n  Switch,\r\n  styled,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport DatePicker from \"react-date-picker\";\r\nimport Swal from \"sweetalert2\";\r\nimport { confirm } from \"react-confirm-box\";\r\n\r\n// import { Delete } from '@material-ui/icons';\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport BlockIcon from \"@material-ui/icons/Block\";\r\n\r\n// For Table\r\nimport SearchBar from \"material-ui-search-bar\";\r\nimport { get, identity, sortBy, stubTrue } from \"lodash\";\r\n\r\n//history\r\nimport { useHistory } from \"react-router-dom\";\r\n// import AddEditCategory from \"../AccountManagement/Account_Details\";\r\n\r\n// import './Category_Management.css' ;\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { DeleteOutline, WidgetsOutlined } from \"@material-ui/icons\";\r\nimport ModalVideo from \"react-modal-video\";\r\n// import 'node_modules/react-modal-video/scss/modal-video.scss';\r\nimport VideocamIcon from \"@material-ui/icons/Videocam\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { Formik, Field, Form } from \"formik\";\r\nimport RSelect from \"react-select\";\r\nimport \"./ViewUser.css\";\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport NoDataFound from \"../../components/NoDataFound\";\r\nimport { GrApple, GrAndroid } from \"react-icons/gr\";\r\n// import Swal from \"sweetalert2\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexWrap: \"wrap\",\r\n    // marginTop: '5rem',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  paperHeading: {\r\n    padding: \"1rem 0rem\",\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  textMiddle: {\r\n    verticalAlign: \"middle !important\",\r\n  },\r\n  iconMargin: {\r\n    margin: \"0.5rem\",\r\n    color: \"#fff\",\r\n    backgroundColor: \"#696969\",\r\n  },\r\n  iconcolor: {\r\n    margin: \"0.5rem\",\r\n    color: \"#fff\",\r\n    backgroundColor: \"#0294b3 !important\",\r\n  },\r\n  headingButton: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n    padding: \"10px\",\r\n  },\r\n  headingAlignment: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    // padding: \"0 2rem 0 2rem\"\r\n    alignItems: \"center\",\r\n    flexWrap: \"wrap\",\r\n    [\"@media (max-width:780px)\"]: {\r\n      // eslint-disable-line no-useless-computed-key\r\n      flexDirection: \"column\",\r\n      width: \"100%\",\r\n      gap: \"1rem\",\r\n      justifyContent: \"center\",\r\n      textAlign: \"center\",\r\n    },\r\n  },\r\n  Marginbutton: {\r\n    margin: \"0.5rem\",\r\n  },\r\n  container: {\r\n    // maxHeight: \"65vh\",\r\n    // height:\"auto\"\r\n  },\r\n  paperPaddingRightLeft: {\r\n    padding: \"0rem 1rem\",\r\n  },\r\n}));\r\n\r\nconst Android12Switch = styled(Switch)(({ theme }) => ({\r\n  padding: 8,\r\n  \"& .MuiSwitch-track\": {\r\n    borderRadius: 22 / 2,\r\n    \"&:before, &:after\": {\r\n      content: '\"\"',\r\n      position: \"absolute\",\r\n      top: \"50%\",\r\n      transform: \"translateY(-50%)\",\r\n      width: 16,\r\n      height: 16,\r\n    },\r\n    \"&:before\": {\r\n      backgroundImage: `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"16\" viewBox=\"0 0 24 24\"><path fill=\"${encodeURIComponent(\r\n        theme.palette.getContrastText(theme.palette.primary.main)\r\n      )}\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"/></svg>')`,\r\n      left: 12,\r\n    },\r\n    \"&:after\": {\r\n      backgroundImage: `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"16\" viewBox=\"0 0 24 24\"><path fill=\"${encodeURIComponent(\r\n        theme.palette.getContrastText(theme.palette.primary.main)\r\n      )}\" d=\"M19,13H5V11H19V13Z\" /></svg>')`,\r\n      right: 12,\r\n    },\r\n  },\r\n  \"& .MuiSwitch-thumb\": {\r\n    boxShadow: \"none\",\r\n    width: 16,\r\n    height: 16,\r\n    margin: 2,\r\n  },\r\n}));\r\n\r\nexport default function UserManagement(props) {\r\n  const classes = useStyles();\r\n\r\n  // const history=useHistory();\r\n  const {\r\n    location: { state },\r\n    history,\r\n  } = props;\r\n  const [searchedValue, setSearchedValue] = useState();\r\n  const [rselKey, setRselKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [startDate, setStartDate] = useState(null);\r\n  const [endDate, setEndDate] = useState(null);\r\n  const [PaginationData, setPaginationData] = useState();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [open, setOpen] = useState(false);\r\n  const [showSearch, setShowSearch] = useState(false);\r\n  const [applyFilter, setApplyFilter] = useState({\r\n    all: false,\r\n    select: false,\r\n    date: false,\r\n  });\r\n  const [showView, setShowView] = useState(true);\r\n  const [selectedProfile, setSelectedProfile] = useState();\r\n  const profileData = [\r\n    { label: \"All\", value: \"3\" },\r\n    { label: \"Complete User Profiles\", value: \"1\" },\r\n    { label: \"Incomplete User Profiles\", value: \"0\" },\r\n  ];\r\n  const [applyButtonColor, setApplyButtonColor] = useState(false);\r\n  // status switch\r\n  // const [checked, setChecked] = useState(true);\r\n\r\n  // For Pagination\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleChangePage = async (event, newPage) => {\r\n    const FormatedDate = getDateFormat(startDate, endDate);\r\n    console.log(newPage);\r\n    console.log({ event, newPage });\r\n    getCategoriesContent(newPage + 1, rowsPerPage, Incomplete, search, FormatedDate.sDate, FormatedDate.eDate);\r\n    console.log(\"checkpage\");\r\n    // setPage(newPage);\r\n    // if (PaginationData.totalPages > newPage) {\r\n    //   try {\r\n    //     const { data } = await axios.get(`/userList?page=${newPage}&limit=10`);\r\n    //     console.log(data);\r\n    //     setTableData(data.data.docs);\r\n    //     setSearchedData(data.data.docs);\r\n    //     setPaginationData(data.data);\r\n    //     setPage(newPage);\r\n    //   } catch (err) {\r\n    //     console.log(err);\r\n    //   }\r\n    // } else {\r\n    //   toast.error(\"No More Data\");\r\n    // }\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    const FormatedDate = getDateFormat(startDate, endDate);\r\n    console.log(+event.target.value);\r\n    // setRowsPerPage(+event.target.value);\r\n    // setPage(0);\r\n    console.log(page);\r\n    getCategoriesContent(0, event.target.value, Incomplete, search, FormatedDate.sDate, FormatedDate.eDate);\r\n    console.log(\"checkrows\");\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    console.log({ event });\r\n    setPage(0);\r\n  };\r\n\r\n  //get content\r\n  const [pagenumber, setPageNumber] = useState(1);\r\n  const [totalUserListCount, settotalUserListCount] = useState(0);\r\n  const [limit, setLimit] = useState(10);\r\n  const [Incomplete, setIncomplete] = useState(\"3\");\r\n  const [search, setSearch] = useState(\"\");\r\n  const getCategoriesContent = async (page = 1, limit = 10, Incomplete = \"3\", search = \"\", startDate = \"\", endDate = \"\") => {\r\n    setIsLoading(true);\r\n    try {\r\n      const { data } = await axios.get(\r\n        `/private/userList?page=${page}&limit=${limit}&incomplete=${Incomplete}&search=${search}&start_date=${startDate}&end_date=${endDate}`\r\n      );\r\n      console.log(data);\r\n      setTableData([...data.data.docs]);\r\n      setSearchedData(data.data.docs);\r\n      settotalUserListCount(data.data.totalDocs);\r\n      setIncomplete(Incomplete);\r\n      setSearch(search);\r\n      setLimit(limit);\r\n      setPage(data.data.page - 1);\r\n      setIsLoading(false);\r\n\r\n      // setPaginationData(data.data);\r\n      // setIsLoading(false);\r\n      if (data.data.docs.length === 0 || data.status === 500) {\r\n        // toast.error(\"No Data Found\", {\r\n        //   position: toast.POSITION.TOP_RIGHT,\r\n        // });\r\n      } else {\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  console.log(tableData);\r\n  // edit user\r\n\r\n  // For Search\r\n  const [searched, setSearched] = useState(\"\");\r\n  const [searchedData, setSearchedData] = useState([]);\r\n  const [UserCategoryData, setUserCategoryData] = useState();\r\n\r\n  const requestSearch = (searchedVal) => {\r\n    console.log(searchedVal);\r\n\r\n    const filteredRows = searchedData.filter((row) => {\r\n      let name = row.username;\r\n      let email = row.email;\r\n      console.log(row);\r\n      return name.toLowerCase().includes(searchedVal.toLowerCase()) || email.toLowerCase().includes(searchedVal.toLowerCase());\r\n    });\r\n    setTableData(filteredRows);\r\n  };\r\n\r\n  const cancelSearch = () => {\r\n    getCategoriesContent(page, limit, Incomplete, \"\");\r\n    console.log(\"checkCancel\");\r\n    // setSearched(\"\");\r\n    //  console.log(searchedData);\r\n    //  requestSearch()\r\n  };\r\n\r\n  const sorting = () => {\r\n    //   if(sort){\r\n    //  let tableSortedData= sortBy(tableData,\r\n    //     [function(o) { console.log(o); return new Date(o.postId.createdAt).getTime(); }])\r\n    //     console.log(tableSortedData);\r\n    // setTableData(tableSortedData);\r\n    //   }else {\r\n    //  let tableSortedData= sortBy(tableData,\r\n    //     [function(o) { console.log(o); return new Date(o.postId.createdAt).getTime(); }],\r\n    //     { reverse: true })\r\n    //     setTableData(tableSortedData);\r\n    //   }\r\n    let sortedData = sortBy(tableData, [\r\n      function (o) {\r\n        // console.log(o);\r\n        return new Date(o.createdAt).getTime();\r\n      },\r\n    ]).reverse();\r\n    return sortedData;\r\n  };\r\n\r\n  const BlockUser = async (id) => {\r\n    Swal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"Proceed to block!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes, block it!\",\r\n    }).then(async (result) => {\r\n      if (result.isConfirmed) {\r\n        const { data } = await axios.get(`/private/userDeleteAndBlock?id=${id}&status=block`);\r\n        console.log(data);\r\n        getCategoriesContent(page, limit, Incomplete, search);\r\n        toast.success(\"User Blocked\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n        // Swal.fire(\"Deleted!\", \"Your file has been deleted.\", \"success\");\r\n      } else {\r\n        toast.error(\"You have cancelled the operation\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n      }\r\n    });\r\n\r\n    // if (window.confirm(\"Are you sure you want to block this user?\")) {\r\n    //   try {\r\n    //     // console.log(category);\r\n    //     const { data } = await axios.get(`/private/userDeleteAndBlock?id=${id}&status=block`);\r\n    //     console.log(data);\r\n    //     getCategoriesContent(page, limit, Incomplete, search);\r\n    //     toast.success(\"User Blocked\", {\r\n    //       position: toast.POSITION.TOP_RIGHT,\r\n    //     });\r\n    //   } catch (error) {\r\n    //     console.log(error);\r\n    //   }\r\n    // } else {\r\n    //   toast.error(\"Operation Cancelled\", {\r\n    //     position: toast.POSITION.TOP_RIGHT,\r\n    //   });\r\n    // }\r\n  };\r\n\r\n  const UnblockUser = async (id) => {\r\n    Swal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"Proceed to unblock!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes, unblock it!\",\r\n    }).then(async (result) => {\r\n      if (result.isConfirmed) {\r\n        const { data } = await axios.get(`/private/userDeleteAndBlock?id=${id}&status=unblock`);\r\n        console.log(data);\r\n        getCategoriesContent(page, limit, Incomplete, search);\r\n        toast.success(\"User Unblocked\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n        // Swal.fire(\"Deleted!\", \"Your file has been deleted.\", \"success\");\r\n      } else {\r\n        toast.error(\"You have cancelled the operation\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n      }\r\n    });\r\n    // if (window.confirm(\"Are you sure you want to unblock this user?\")) {\r\n    //   try {\r\n    //     // console.log(category);\r\n    //     const { data } = await axios.get(`/private/userDeleteAndBlock?id=${id}&status=unblock`);\r\n    //     console.log(data);\r\n    //     getCategoriesContent(page, limit, Incomplete, search);\r\n    //     toast.success(\"User Unblocked\", {\r\n    //       position: toast.POSITION.TOP_RIGHT,\r\n    //     });\r\n    //   } catch (error) {\r\n    //     console.log(error);\r\n    //   }\r\n    // } else {\r\n    //   toast.error(\"Operation Cancelled\", {\r\n    //     position: toast.POSITION.TOP_RIGHT,\r\n    //   });\r\n    // }\r\n  };\r\n  console.log(tableData.docs?.length);\r\n  const DeleteUser = async (id) => {\r\n    Swal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"All data will be deleted permanently . Proceed to delete!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes, delete it!\",\r\n    }).then(async (result) => {\r\n      if (result.isConfirmed) {\r\n        const { data } = await axios.get(`/private/userDeleteAndBlock?id=${id}&status=delete`);\r\n        console.log(data);\r\n        getCategoriesContent(page, limit, Incomplete, search);\r\n        toast.success(\"User Deleted\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n        // Swal.fire(\"Deleted!\", \"Your file has been deleted.\", \"success\");\r\n      } else {\r\n        toast.error(\"You have cancelled the operation\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n      }\r\n    });\r\n    // if (window.confirm(\"Are you sure you want to delete this user?\")) {\r\n    //   try {\r\n    //     // console.log(category);\r\n    //     const { data } = await axios.get(`/private/userDeleteAndBlock?id=${id}&status=delete`);\r\n    //     console.log(data);\r\n    //     getCategoriesContent(page, limit, Incomplete, search);\r\n    //     toast.success(\"User Deleted\", {\r\n    //       position: toast.POSITION.TOP_RIGHT,\r\n    //     });\r\n    //   } catch (error) {\r\n    //     toast.error(error.response.message, {\r\n    //       position: toast.POSITION.TOP_RIGHT,\r\n    //     });\r\n    //     console.log(error);\r\n    //   }\r\n    // } else {\r\n    //   toast.error(\"You have cancelled the operation\", {\r\n    //     position: toast.POSITION.TOP_RIGHT,\r\n    //   });\r\n    // }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (state && state !== undefined) {\r\n      setApplyButtonColor(state.applyButtonColor);\r\n      setStartDate(state.startDate);\r\n      setEndDate(state.endDate);\r\n      setSearch(state.search);\r\n      setLimit(state.limit);\r\n      const FormatedDate = getDateFormat(state.startDate, state.endDate);\r\n      getCategoriesContent(\r\n        state.page,\r\n        state.limit,\r\n        state.Incomplete,\r\n\r\n        state.search,\r\n        FormatedDate.sDate,\r\n        FormatedDate.eDate\r\n      );\r\n    } else {\r\n      getCategoriesContent();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setRselKey((k) => k + 1);\r\n  }, [tableData]);\r\n  // useEffect(() => {\r\n  //   if (startDate === null && endDate === null) {\r\n  //     console.log(\"check1\");\r\n  //     if (state && state !== undefined) {\r\n  //       getCategoriesContent(\r\n  //         state.page,\r\n  //         state.limit,\r\n  //         state.Incomplete,\r\n\r\n  //         state.search,\r\n  //         state.startDate,\r\n  //         state.endDate\r\n  //       );\r\n  //     } else {\r\n  //       getCategoriesContent();\r\n  //     }\r\n  //     // getCategoriesContent(page, limit, Incomplete, search);\r\n  //   } else if (startDate === null || endDate === null) {\r\n  //     toast.info(\"Please Select Both Dates To Get Filtered Data\", {\r\n  //       position: toast.POSITION.TOP_RIGHT,\r\n  //     });\r\n  //     getCategoriesContent(page, limit, Incomplete, search);\r\n  //     console.log(\"check2\");\r\n  //   } else if (startDate !== null && endDate !== null) {\r\n  //     const FormatedDate = getDateFormat(startDate, endDate);\r\n  //     getCategoriesContent(page, limit, Incomplete, search, FormatedDate.sDate, FormatedDate.eDate);\r\n  //     toast.success(\"Filtered Data\", {\r\n  //       position: toast.POSITION.TOP_RIGHT,\r\n  //     });\r\n  //     console.log(\"check3\");\r\n  //   }\r\n  // }, [startDate, endDate]);\r\n\r\n  // const getFilteredData = async () => {\r\n  //   const FormatedDate = getDateFormat(startDate, endDate);\r\n\r\n  //   try {\r\n  //     const { data } = await axios.get(\r\n  //       `/private/userList?page=${page}&limit=${limit}&start_date=${FormatedDate.sDate}&end_date=${FormatedDate.eDate}`\r\n  //     );\r\n\r\n  //     if (data.data.docs !== null && data.data.docs.length > 0) {\r\n  //       setTableData([...data.data.docs]);\r\n  //       setSearchedData(data.data.docs);\r\n  //       settotalUserListCount(data.data.totalDocs);\r\n  //       setIncomplete(Incomplete);\r\n  //       toast.success(\"Filtered Data\", {\r\n  //         position: toast.POSITION.TOP_RIGHT,\r\n  //       });\r\n  //     } else {\r\n  //       setTableData([]);\r\n  //       toast.error(\"No Data Found\", {\r\n  //         position: toast.POSITION.TOP_RIGHT,\r\n  //       });\r\n  //       setSearchedData([]);\r\n  //     }\r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // };\r\n\r\n  // const getUserIncompleteData = async () => {\r\n  //   try {\r\n  //     const { data } = await axios.get(\"/private/userList?page=1&limit=10\");\r\n  //     console.log(data);\r\n  //     setTableData(data.data.docs.filter((e) => e.userProfileUpdate === \"false\"));\r\n  //     setSearchedData(data.data.docs.filter((e) => e.userProfileUpdate === \"false\"));\r\n  //     // setPaginationData(data.data);\r\n  //     // setIsLoading(false);\r\n  //     if (data.data.docs.length === 0) {\r\n  //       toast.error(\"No Data Found\", {\r\n  //         position: toast.POSITION.TOP_RIGHT,\r\n  //       });\r\n  //     } else {\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n  //   }\r\n  // };\r\n\r\n  function myDeb(call, d = 1000) {\r\n    let timer;\r\n    return function (...args) {\r\n      clearTimeout(timer);\r\n      timer = setTimeout(() => {\r\n        call(...args);\r\n      }, d);\r\n    };\r\n  }\r\n\r\n  const SearchUser = myDeb((search) => {\r\n    const FormatedDate = getDateFormat(startDate, endDate);\r\n    getCategoriesContent(page, rowsPerPage, Incomplete, search.toLowerCase(), FormatedDate.sDate, FormatedDate.eDate);\r\n  });\r\n  const sanitizeRating = (rating) => {\r\n    let regexNumber = /^[0-9]+$/;\r\n\r\n    if (regexNumber.test(rating)) {\r\n      return rating;\r\n    } else if (typeof rating === \"number\") {\r\n      // return rating.slice(0, 3);\r\n\r\n      return +rating.toFixed(1);\r\n    }\r\n  };\r\n\r\n  const ViewUserDetails = async (data) => {\r\n    let apiHit = {\r\n      page: page + 1,\r\n      limit: rowsPerPage,\r\n      Incomplete: Incomplete,\r\n      search: search,\r\n      startDate: startDate,\r\n      endDate: endDate,\r\n      applyButtonColor: applyButtonColor,\r\n      pathname: \"/adminPanel/user-management\",\r\n    };\r\n    props.history.push({\r\n      pathname: \"/adminPanel/ViewUser\",\r\n      state: [data._id, apiHit, data.serviceType],\r\n    });\r\n  };\r\n  // const ViewUserDetails = async (id) => {\r\n  //   let UserPageData = {\r\n  //     pageName: \"User\",\r\n  //     page: page + 1,\r\n  //     limit: rowsPerPage,\r\n  //     Incomplete: Incomplete,\r\n  //     search: search,\r\n  //     startDate: startDate,\r\n  //     endDate: endDate,\r\n  //     applyButtonColor: applyButtonColor,\r\n  //     UserID: id,\r\n  //   };\r\n  //   props.history.push({\r\n  //     pathname: \"/adminPanel/ViewUser\",\r\n  //     state: [UserPageData],\r\n  //   });\r\n  // };\r\n  function filterLanguageValue(language) {\r\n    switch (language) {\r\n      case \"en\":\r\n        return \"English\";\r\n\r\n      case \"es\":\r\n        return \"Spanish\";\r\n      case \"zh\":\r\n        return \"Chinese\";\r\n      case \"ko\":\r\n        return \"Korean\";\r\n      default:\r\n        return \"N/A\";\r\n    }\r\n  }\r\n\r\n  const deleteUsers = () => {\r\n    Swal.fire({\r\n      title: \"Are you sure?\",\r\n      text: selected.length>0?\"All selected data will be deleted permanently . Proceed to delete!\":\"All data will be deleted permanently . Proceed to delete!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes, delete it!\",\r\n    }).then(async (result) => {\r\n      if (result.isConfirmed) {\r\n        const { data } = await axios.post(`/private/userDelete`, {\r\n          userIds: selected.length>0?selected:[\"allDelete\"],\r\n          all_delete: selected.length>0?false: true,\r\n          userType: \"user\",\r\n        });\r\n        console.log(data);\r\n        getCategoriesContent(page, limit, Incomplete, search);\r\n        toast.success(\"All Users Deleted\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n        // Swal.fire(\"Deleted!\", \"Your file has been deleted.\", \"success\");\r\n      } else {\r\n        toast.error(\"You have cancelled the operation\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const [selected, setSelected] = React.useState([]);\r\n  const handleSelectAllClick = (event) => {\r\n    if (selected?.length) {\r\n      setSelected([]);\r\n    } else {\r\n      const newSelecteds = tableData.map((n) => n._id);\r\n      setSelected(newSelecteds);\r\n    }\r\n  };\r\n  const handleClick = (event, name) => {\r\n    console.log(name)\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n  console.log(selected)\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className={classes.root}>\r\n          <Paper elevation={0} style={{ backgroundColor: \"transparent\" }}>\r\n            <div className={classes.paperPaddingRightLeft}>\r\n              <div className=\"\">\r\n              \r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexWrap: \"wrap\",\r\n                    gap: \"0.5rem\",\r\n                    alignItems: \"center\",\r\n                    margin: \"0.5rem 0\",\r\n                    justifyContent: \"space-between\",\r\n                  }}\r\n                >\r\n                     <SearchBar\r\n                      // value={searched}\r\n                      style={{\r\n                        borderRadius: \"25px\",\r\n                        minWidth:\"20vw\"\r\n                      }}\r\n                      className={\"heightfix  \"}\r\n                      onChange={(searchVal) => {\r\n                        SearchUser(searchVal);\r\n                        setSearchedValue(searchVal);\r\n                      }}\r\n                      onCancelSearch={() => {\r\n                        cancelSearch();\r\n                        setSearchedValue(\"\");\r\n                      }}\r\n                      placeholder=\"Search by User Name,Mobile Number\"\r\n                      inputProps={{ maxLength: 30 }}\r\n                    />\r\n                  {/* <div style={{ display: \"flex\", gap: \"0.5rem\", flexWrap: \"wrap\" }}>\r\n             \r\n                    <div className=\"\" style={{ width: \"150px\", zIndex: 3 }}>\r\n                      <RSelect\r\n                        key={rselKey}\r\n                        options={profileData}\r\n                        defaultValue={{ label: \"All\", value: \"3\" }}\r\n                        placeholder=\"Select Profile\"\r\n                        value={selectedProfile}\r\n                        isSearchable={false}\r\n                        onChange={(e) => {\r\n                          setSelectedProfile(e);\r\n                          setApplyFilter({ ...applyFilter, select: true });\r\n                          if (e.value === \"0\") {\r\n                            // getCategoriesContent(1, limit, false, search);\r\n                            // setRowsPerPage(10);\r\n\r\n                            setIncomplete(\"0\");\r\n                          } else if (e.value === \"1\") {\r\n                            // getCategoriesContent(1, limit, true, search);\r\n                            setIncomplete(\"1\");\r\n                          } else if (e.value === \"3\") {\r\n                            setIncomplete(\"3\");\r\n                          }\r\n                        }}\r\n                      />\r\n                    \r\n                    </div>\r\n                    <style>\r\n                      {`\r\n                        .react-date-picker__calendar{\r\n                          z-index: 3 !important;\r\n                        }\r\n                      `}\r\n                    </style>\r\n                    <div className=\"\">\r\n                      <div style={{ display: \"flex\", gap: \"0.5rem\", alignItems: \"baseline\" }}>\r\n                        <h5>From:</h5>\r\n                        <DatePicker\r\n                          value={startDate}\r\n                          dateFormat=\"DD/MM/YYYY\"\r\n                          maxDate={new Date()}\r\n                          onChange={(date) => {\r\n                            console.log(date);\r\n                            if (date !== null) {\r\n                              setApplyFilter({ ...applyFilter, date: true });\r\n                            } else {\r\n                              setApplyFilter({ ...applyFilter, date: false });\r\n                            }\r\n                            setStartDate(date);\r\n                          }}\r\n                        />\r\n                        <h5>To:</h5>\r\n                        <DatePicker\r\n                          onChange={(date) => {\r\n                            if (date !== null) {\r\n                              setApplyFilter({ ...applyFilter, date: true });\r\n                            } else {\r\n                              setApplyFilter({ ...applyFilter, date: false });\r\n                            }\r\n                            setEndDate(date);\r\n                          }}\r\n                          minDate={startDate}\r\n                          maxDate={new Date()}\r\n                          value={endDate}\r\n                          dateFormat=\"DD/MM/YYYY\"\r\n                        />\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          className=\"\"\r\n                          style={{ backgroundColor: applyButtonColor ? \"#675fe7\" : \"#0059cd\", color: \"#fff\" }}\r\n                          onClick={() => {\r\n                            setApplyButtonColor(true);\r\n                            if (applyFilter.select === true && applyFilter.date === false) {\r\n                              if (Incomplete === \"1\") {\r\n                                setShowView(true);\r\n                              } else {\r\n                                setShowView(false);\r\n                              }\r\n                              // if (Incomplete === false) {\r\n                              const FormatedDate = getDateFormat(startDate, endDate);\r\n                              getCategoriesContent(page, limit, Incomplete, search, FormatedDate.sDate, FormatedDate.eDate);\r\n\r\n                              // setRowsPerPage(10);\r\n                              // setIncomplete(false);\r\n                              // } else {\r\n                              // const FormatedDate = getDateFormat(startDate, endDate);\r\n                              // getCategoriesContent(page, limit, Incomplete, search, FormatedDate.sDate, FormatedDate.eDate);\r\n                              // setIncomplete(true);\r\n                              // }\r\n\r\n                              toast.success(\"Filtered Data\", {\r\n                                position: toast.POSITION.TOP_RIGHT,\r\n                              });\r\n                              console.log(applyFilter);\r\n                            }\r\n                            if (applyFilter.date === true && applyFilter.select === false) {\r\n                              // if (!Incomplete) setShowView(false);\r\n                              if (Incomplete === \"1\") {\r\n                                setShowView(true);\r\n                              } else {\r\n                                setShowView(false);\r\n                              }\r\n                              if (startDate === null || endDate === null) {\r\n                                toast.info(\"Please Select Both Dates To Get Filtered Data\", {\r\n                                  position: toast.POSITION.TOP_RIGHT,\r\n                                });\r\n                              } else if (startDate !== null && endDate !== null) {\r\n                                const FormatedDate = getDateFormat(startDate, endDate);\r\n                                getCategoriesContent(page, limit, Incomplete, search, FormatedDate.sDate, FormatedDate.eDate);\r\n                                toast.success(\"Filtered Data\", {\r\n                                  position: toast.POSITION.TOP_RIGHT,\r\n                                });\r\n                              }\r\n                              console.log(applyFilter);\r\n                            }\r\n                            if (applyFilter.date === true && applyFilter.select === true) {\r\n                              if (Incomplete === \"1\") {\r\n                                setShowView(true);\r\n                              } else {\r\n                                setShowView(false);\r\n                              }\r\n                              if (startDate === null || endDate === null) {\r\n                                toast.info(\"Please Select Both Dates To Get Filtered Data\", {\r\n                                  position: toast.POSITION.TOP_RIGHT,\r\n                                });\r\n                              } else if (startDate !== null && endDate !== null) {\r\n                                const FormatedDate = getDateFormat(startDate, endDate);\r\n                                getCategoriesContent(page, limit, Incomplete, search, FormatedDate.sDate, FormatedDate.eDate);\r\n                                toast.success(\"Filtered Data\", {\r\n                                  position: toast.POSITION.TOP_RIGHT,\r\n                                });\r\n                              }\r\n                              console.log(applyFilter);\r\n                            }\r\n                          }}\r\n                        >\r\n                          Apply\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          className=\" \"\r\n                          style={{ backgroundColor: \"#0059cd\", color: \"#fff\" }}\r\n                          onClick={() => {\r\n                            setSelectedProfile(null);\r\n                            setApplyButtonColor(false);\r\n                            setShowView(true);\r\n                            setApplyFilter({ ...applyFilter, date: false, select: false });\r\n                            setStartDate(null);\r\n                            setEndDate(null);\r\n\r\n                            getCategoriesContent();\r\n                          }}\r\n                        >\r\n                          {\" \"}\r\n                          RESET\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  </div> */}\r\n                  <div style={{ display: \"flex\", gap: \"0.5rem\", flexWrap: \"wrap\", alignItems: \"center\" }}>\r\n                    {/* <SearchBar\r\n                      // value={searched}\r\n                      style={{\r\n                        borderRadius: \"25px\",\r\n                      }}\r\n                      className={\"heightfix  \"}\r\n                      onChange={(searchVal) => {\r\n                        SearchUser(searchVal);\r\n                        setSearchedValue(searchVal);\r\n                      }}\r\n                      onCancelSearch={() => {\r\n                        cancelSearch();\r\n                        setSearchedValue(\"\");\r\n                      }}\r\n                      placeholder=\"Search by User Name,Mobile Number\"\r\n                      inputProps={{ maxLength: 30 }}\r\n                    /> */}\r\n    <div style={{ display: \"flex\", gap: \"0.5rem\", flexWrap: \"wrap\" }}>\r\n             \r\n             <div className=\"\" style={{ width: \"150px\", zIndex: 3 }}>\r\n               <RSelect\r\n                 key={rselKey}\r\n                 options={profileData}\r\n                 defaultValue={{ label: \"All\", value: \"3\" }}\r\n                 placeholder=\"Select Profile\"\r\n                 value={selectedProfile}\r\n                 isSearchable={false}\r\n                 onChange={(e) => {\r\n                   setSelectedProfile(e);\r\n                   setApplyFilter({ ...applyFilter, select: true });\r\n                   if (e.value === \"0\") {\r\n                     // getCategoriesContent(1, limit, false, search);\r\n                     // setRowsPerPage(10);\r\n\r\n                     setIncomplete(\"0\");\r\n                   } else if (e.value === \"1\") {\r\n                     // getCategoriesContent(1, limit, true, search);\r\n                     setIncomplete(\"1\");\r\n                   } else if (e.value === \"3\") {\r\n                     setIncomplete(\"3\");\r\n                   }\r\n                 }}\r\n               />\r\n             \r\n             </div>\r\n             <style>\r\n               {`\r\n                 .react-date-picker__calendar{\r\n                   z-index: 3 !important;\r\n                 }\r\n               `}\r\n             </style>\r\n             <div className=\"\">\r\n               <div style={{ display: \"flex\", gap: \"0.5rem\", alignItems: \"baseline\" }}>\r\n                 <h5>From:</h5>\r\n                 <DatePicker\r\n                   value={startDate}\r\n                   dateFormat=\"DD/MM/YYYY\"\r\n                   maxDate={new Date()}\r\n                   onChange={(date) => {\r\n                     console.log(date);\r\n                     if (date !== null) {\r\n                       setApplyFilter({ ...applyFilter, date: true });\r\n                     } else {\r\n                       setApplyFilter({ ...applyFilter, date: false });\r\n                     }\r\n                     setStartDate(date);\r\n                   }}\r\n                 />\r\n                 <h5>To:</h5>\r\n                 <DatePicker\r\n                   onChange={(date) => {\r\n                     if (date !== null) {\r\n                       setApplyFilter({ ...applyFilter, date: true });\r\n                     } else {\r\n                       setApplyFilter({ ...applyFilter, date: false });\r\n                     }\r\n                     setEndDate(date);\r\n                   }}\r\n                   minDate={startDate}\r\n                   maxDate={new Date()}\r\n                   value={endDate}\r\n                   dateFormat=\"DD/MM/YYYY\"\r\n                 />\r\n                 <Button\r\n                   variant=\"contained\"\r\n                   className=\"\"\r\n                   style={{ backgroundColor: applyButtonColor ? \"#675fe7\" : \"#0059cd\", color: \"#fff\" }}\r\n                   onClick={() => {\r\n                     setApplyButtonColor(true);\r\n                     if (applyFilter.select === true && applyFilter.date === false) {\r\n                       if (Incomplete === \"1\") {\r\n                         setShowView(true);\r\n                       } else {\r\n                         setShowView(false);\r\n                       }\r\n                       // if (Incomplete === false) {\r\n                       const FormatedDate = getDateFormat(startDate, endDate);\r\n                       getCategoriesContent(page, limit, Incomplete, search, FormatedDate.sDate, FormatedDate.eDate);\r\n\r\n                       // setRowsPerPage(10);\r\n                       // setIncomplete(false);\r\n                       // } else {\r\n                       // const FormatedDate = getDateFormat(startDate, endDate);\r\n                       // getCategoriesContent(page, limit, Incomplete, search, FormatedDate.sDate, FormatedDate.eDate);\r\n                       // setIncomplete(true);\r\n                       // }\r\n\r\n                       toast.success(\"Filtered Data\", {\r\n                         position: toast.POSITION.TOP_RIGHT,\r\n                       });\r\n                       console.log(applyFilter);\r\n                     }\r\n                     if (applyFilter.date === true && applyFilter.select === false) {\r\n                       // if (!Incomplete) setShowView(false);\r\n                       if (Incomplete === \"1\") {\r\n                         setShowView(true);\r\n                       } else {\r\n                         setShowView(false);\r\n                       }\r\n                       if (startDate === null || endDate === null) {\r\n                         toast.info(\"Please Select Both Dates To Get Filtered Data\", {\r\n                           position: toast.POSITION.TOP_RIGHT,\r\n                         });\r\n                       } else if (startDate !== null && endDate !== null) {\r\n                         const FormatedDate = getDateFormat(startDate, endDate);\r\n                         getCategoriesContent(page, limit, Incomplete, search, FormatedDate.sDate, FormatedDate.eDate);\r\n                         toast.success(\"Filtered Data\", {\r\n                           position: toast.POSITION.TOP_RIGHT,\r\n                         });\r\n                       }\r\n                       console.log(applyFilter);\r\n                     }\r\n                     if (applyFilter.date === true && applyFilter.select === true) {\r\n                       if (Incomplete === \"1\") {\r\n                         setShowView(true);\r\n                       } else {\r\n                         setShowView(false);\r\n                       }\r\n                       if (startDate === null || endDate === null) {\r\n                         toast.info(\"Please Select Both Dates To Get Filtered Data\", {\r\n                           position: toast.POSITION.TOP_RIGHT,\r\n                         });\r\n                       } else if (startDate !== null && endDate !== null) {\r\n                         const FormatedDate = getDateFormat(startDate, endDate);\r\n                         getCategoriesContent(page, limit, Incomplete, search, FormatedDate.sDate, FormatedDate.eDate);\r\n                         toast.success(\"Filtered Data\", {\r\n                           position: toast.POSITION.TOP_RIGHT,\r\n                         });\r\n                       }\r\n                       console.log(applyFilter);\r\n                     }\r\n                   }}\r\n                 >\r\n                   Apply\r\n                 </Button>\r\n                 <Button\r\n                   variant=\"contained\"\r\n                   className=\" \"\r\n                   style={{ backgroundColor: \"#0059cd\", color: \"#fff\" }}\r\n                   onClick={() => {\r\n                     setSelectedProfile(null);\r\n                     setApplyButtonColor(false);\r\n                     setShowView(true);\r\n                     setApplyFilter({ ...applyFilter, date: false, select: false });\r\n                     setStartDate(null);\r\n                     setEndDate(null);\r\n\r\n                     getCategoriesContent();\r\n                   }}\r\n                 >\r\n                   {\" \"}\r\n                   RESET\r\n                 </Button>\r\n               </div>\r\n             </div>\r\n           </div>\r\n                    <Tooltip title={<span style={{ color: \"white\", fontSize: \"16px\" }}>Delete All Users</span>} arrow>\r\n                      <IconButton\r\n                        className=\"buttoncss\"\r\n                        style={{ backgroundColor: \"#0059cd\", color: \"#fff\" }}\r\n                        onClick={() => {\r\n                          deleteUsers();\r\n                        }}\r\n                      >\r\n                        <DeleteOutlineOutlined />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                  </div>\r\n                </div>\r\n                {/* </Paper> */}\r\n\r\n                {/* //new design */}\r\n\r\n                {/* <br /> */}\r\n\r\n                {/* status end */}\r\n\r\n                <Paper>\r\n                  <TableContainer className={classes.container} style={{ minHeight: tableData.length > 0 ? \"50vh\" : \"\" }}>\r\n                    <Table className={classes.table} stickyHeader size=\"small\">\r\n                      <TableHead>\r\n                        <TableRow>\r\n                        <TableCell className={classes.textMiddle}>\r\n                                <Checkbox\r\n                                  color=\"primary\"\r\n                                  // indeterminate={numSelected > 0 && numSelected < data.length  }\r\n                                  indeterminate={\r\n                                    selected.length > 0 &&\r\n                                    selected.length < tableData.length\r\n                                  }\r\n                                  checked={\r\n                                    tableData.length > 0 &&\r\n                                    selected.length === tableData.length\r\n                                  }\r\n                                  onClick={handleSelectAllClick}\r\n                                />\r\n                              </TableCell>\r\n                          <TableCell style={{ textAlign: \"center\", fontWeight: \"bold\" }}>Sr. No.</TableCell>\r\n                          <TableCell style={{ textAlign: \"center\", fontWeight: \"bold\" }}>Joining Date</TableCell>\r\n                          <TableCell style={{ textAlign: \"center\", fontWeight: \"bold\" }}> User Id</TableCell>\r\n                          <TableCell style={{ textAlign: \"center\", fontWeight: \"bold\" }}> Device Type</TableCell>\r\n\r\n                          <TableCell style={{ textAlign: \"center\", fontWeight: \"bold\" }}> User Name</TableCell>\r\n                          <TableCell style={{ textAlign: \"center\", fontWeight: \"bold\" }}> User Type</TableCell>\r\n                          <TableCell style={{ textAlign: \"center\", fontWeight: \"bold\" }}> User Language</TableCell>\r\n\r\n                          <TableCell style={{ textAlign: \"center\", fontWeight: \"bold\" }}> Average Rating</TableCell>\r\n                          {/* <TableCell\r\n                            style={{ textAlign: \"center\", fontWeight: \"bold\" }}\r\n                          >\r\n                            Profile Image\r\n                          </TableCell> */}\r\n                          <TableCell style={{ textAlign: \"center\", fontWeight: \"bold\" }}>Email Id</TableCell>\r\n                          <TableCell style={{ textAlign: \"center\", fontWeight: \"bold\" }}> Mobile Number</TableCell>\r\n\r\n                          {/* <TableCell style={{textAlign:\"center\",fontWeight:\"bold\"}} >Doc</TableCell> */}\r\n                          <TableCell style={{ textAlign: \"center\", fontWeight: \"bold\" }}>Actions</TableCell>\r\n                          {/* <TableCell>User Type</TableCell>\r\n                              <TableCell>Status</TableCell> */}\r\n                        </TableRow>\r\n                      </TableHead>\r\n\r\n                      <TableBody>\r\n                        {/* {isLoading?<TableRow ><Skeleton style={{width:\"70vw\",borderRadius:\"20px\"}} highlightColor=\"#fff\" height=\"1rem\" count={2} baseColor=\"#ebebeb\"/></TableRow>:false} */}\r\n                        {tableData\r\n                          // .slice(\r\n                          //   page * rowsPerPage,\r\n                          //   page * rowsPerPage + rowsPerPage\r\n                          // )\r\n                          .map((category, index) => {\r\n                            const isItemSelected = isSelected(category._id);\r\n                          return(\r\n                            <TableRow \r\n                            key={category._id}\r\n                            hover\r\n                            onClick={(event) =>\r\n                              handleClick(event, category._id)\r\n                            }\r\n                            role=\"checkbox\"\r\n                            tabIndex={-1}\r\n                            selected={isItemSelected}\r\n                            // hover key={index}\r\n                            >\r\n                               <TableCell className={classes.textMiddle}>\r\n                                      <div className=\"checkboxColour\"><Checkbox\r\n                                        color=\"primary\"\r\n                                        // className={classes.checkSize}\r\n                                        className=\"form-control\"\r\n                                        checked={isItemSelected}\r\n                                      /></div>\r\n                                    </TableCell>\r\n                              <TableCell\r\n\r\n                                component=\"th\"\r\n                                scope=\"row\"\r\n                                className={classes.textMiddle}\r\n                                style={{ textAlign: \"center\" }}\r\n                              >\r\n                                {index + 1 + page * rowsPerPage}\r\n                              </TableCell>\r\n                              <TableCell style={{ textAlign: \"center\" }}>\r\n                                {category.createdAt\r\n                                  ? new Date(category.createdAt)\r\n                                      // .toUTCString()\r\n                                      .getUTCDate() +\r\n                                    \"/\" +\r\n                                    (new Date(category.createdAt)\r\n                                      // .toUTCString()\r\n                                      .getUTCMonth() +\r\n                                      1) +\r\n                                    \"/\" +\r\n                                    new Date(category.createdAt)\r\n                                      // .toUTCString()\r\n                                      .getUTCFullYear()\r\n                                  : // moment.utc(category.createdAt).format(\"L\")\r\n                                    \"N/A\"}\r\n                              </TableCell>\r\n                              <TableCell className={classes.textMiddle} style={{ textAlign: \"center\" }}>\r\n                                {get(category, \"user_id\", \"N/A\")}\r\n                              </TableCell>\r\n                              <TableCell className={classes.textMiddle} style={{ textAlign: \"center\" }}>\r\n                                {get(category, \"deviceId\", \"N/A\") === \"0\" ? (\r\n                                  <GrApple style={{ fontSize: \"20px\", color: \"#424245\" }} />\r\n                                ) : (\r\n                                  <GrAndroid style={{ fontSize: \"20px\", color: \"#79c257\" }} />\r\n                                )}\r\n                              </TableCell>\r\n                              <TableCell\r\n                                className={classes.textMiddle}\r\n                                style={{ textAlign: \"center\", textTransform: \"capitalize\" }}\r\n                              >\r\n                                {category?.username && category?.username !== \" \" ? category?.username : \"N/A\"}\r\n                              </TableCell>\r\n                              <TableCell className={classes.textMiddle} style={{ textAlign: \"center\" }}>\r\n                                {\r\n                                  // Incomplete === true ?\r\n                                  category?.userCategory === \"Business\" ? (\r\n                                    <div\r\n                                      style={{\r\n                                        display: \"flex\",\r\n                                        alignItems: \"center\",\r\n                                        justifyContent: \"center\",\r\n                                      }}\r\n                                    >\r\n                                      {category.userCategory}&nbsp;\r\n                                      <VisibilityIcon\r\n                                        onClick={() => {\r\n                                          setOpen(true);\r\n                                          setUserCategoryData(category);\r\n                                        }}\r\n                                        style={{ cursor: \"pointer\" }}\r\n                                      />\r\n                                    </div>\r\n                                  ) : category?.userCategory !== \" \" && category?.userCategory !== null ? (\r\n                                    category?.userCategory\r\n                                  ) : (\r\n                                    \"N/A\"\r\n                                  )\r\n                                }\r\n                                {/* {category.userCategory === \"Business\" ? (\r\n                                  <div\r\n                                    style={{\r\n                                      display: \"flex\",\r\n                                      alignItems: \"center\",\r\n                                      justifyContent: \"center\",\r\n                                    }}\r\n                                  >\r\n                                    {category.userCategory}&nbsp;\r\n                                    <VisibilityIcon\r\n                                      onClick={() => {\r\n                                        setOpen(true);\r\n                                        setUserCategoryData(category);\r\n                                      }}\r\n                                      style={{ cursor: \"pointer\" }}\r\n                                    />\r\n                                  </div>\r\n                                ) : (\r\n                                  category.userCategory\r\n                                )} */}\r\n                              </TableCell>\r\n                              <TableCell className={classes.textMiddle} style={{ textAlign: \"center\" }}>\r\n                                {get(category, \"userLanguage\", \"N/A\")\r\n                                  ? filterLanguageValue(get(category, \"userLanguage\", \"N/A\"))\r\n                                  : \"N/A\"}\r\n                              </TableCell>\r\n                              <TableCell className={classes.textMiddle} style={{ textAlign: \"center\" }}>\r\n                                {/* {category.country_code + category.phone_number}\r\n                                 */}\r\n\r\n                                {/* {get(category, \"rating\", \"N/A\")} */}\r\n                                {category.rating ? sanitizeRating(category.rating) : \"0\"}\r\n                              </TableCell>\r\n                              <TableCell className={classes.textMiddle} style={{ textAlign: \"center\" }}>\r\n                                {/* {category.profile_picture ? (\r\n                                  <img\r\n                                    src={category.profile_picture}\r\n                                    alt=\"profile\"\r\n                                    style={{ width: \"35px\", height: \"35px\" }}\r\n                                  />\r\n                                ) : (\r\n                                  <img\r\n                                    src={require(\"../../assets/images/logo/ambulance.png\")}\r\n                                    alt=\"profile\"\r\n                                    style={{ width: \"35px\", height: \"35px\" }}\r\n                                  />\r\n                                )} */}\r\n                                {get(category, \"email\", \"N/A\") === null ? \"N/A\" : get(category, \"email\", \"N/A\")}\r\n                              </TableCell>\r\n                              <TableCell className={classes.textMiddle} style={{ textAlign: \"center\" }}>\r\n                                {/* {category.country_code + category.phone_number}\r\n                                 */}\r\n                                {get(category, \"countryCode\", \"N/A\")}&nbsp;\r\n                                {get(category, \"phone\", \"N/A\") === null ? \"N/A\" : get(category, \"phone\", \"N/A\")}\r\n                              </TableCell>\r\n\r\n                              {/* <TableCell style={{textAlign:\"center\"}}>{category.doc?<img src={category.doc} alt=\"doc\" style={{width:\"50px\",height:\"50px\"}}/>:\"No Doc\"}</TableCell> */}\r\n                              <TableCell className={classes.textMiddle} style={{ textAlign: \"center\", whiteSpace: \"nowrap\" }}>\r\n                                {/* <Button onClick={()=>BlockCategory} style={{backgroundColor:\"#696969\"}} >Manage</Button> */}\r\n                                {category?.userProfileUpdate === \"true\" ? (\r\n                                  <Button\r\n                                    className=\"ViewButton\"\r\n                                    onClick={() => {\r\n                                      ViewUserDetails(category);\r\n                                      // ViewUserDetailsNew(category._id);\r\n                                    }}\r\n                                    style={\r\n                                      {\r\n                                        // border: \"1.5px solid #c4c4c4\",\r\n                                        // margin: \"0.5rem\",\r\n                                        // color: \"#696969\",\r\n                                      }\r\n                                    }\r\n                                  >\r\n                                    <Tooltip title={<span style={{ fontSize: \"16px\" }}>View User</span>} arrow>\r\n                                      <VisibilityIcon />\r\n                                    </Tooltip>\r\n                                  </Button>\r\n                                ) : (\r\n                                  <Button disabled={true}></Button>\r\n                                )}\r\n                                {/* <Button\r\n                                  onClick={() => EditUser(category)}\r\n                                  className=\"\"\r\n                                  style={{\r\n                                    border: \"1.5px solid #c4c4c4\",\r\n                                    margin: \"0.5rem\",\r\n                                    color: \"#2765B3\",\r\n                                  }}\r\n                                >\r\n                                  <Tooltip title=\"Edit User\" arrow>\r\n                                    <EditIcon />\r\n                                  </Tooltip>\r\n                                </Button> */}\r\n                                {/* <Button onClick={()=>BlockCategory} style={{backgroundColor:\"#696969\"}} >Manage</Button> */}\r\n\r\n                                {/* <Button onClick={()=>BlockCategory} style={{backgroundColor:\"#696969\"}} >Manage</Button> */}\r\n\r\n                                <Button\r\n                                  className={category.isBlock === \"block\" ? \"BlockedButton mx-2\" : \"BlockButton mx-2\"}\r\n                                  onClick={() =>\r\n                                    category.isBlock === \"block\" ? UnblockUser(category._id) : BlockUser(category._id)\r\n                                  }\r\n                                  style={\r\n                                    {\r\n                                      // border: \"1.5px solid #c4c4c4\",\r\n                                      // margin: \"0.5rem\",\r\n                                      // color: category.isBlock === \"block\" ? \"red\" : \"#696969\",\r\n                                    }\r\n                                  }\r\n                                >\r\n                                  <Tooltip title={<span style={{ fontSize: \"16px\" }}>Block/Unblock User</span>} arrow>\r\n                                    <BlockIcon />\r\n                                  </Tooltip>{\" \"}\r\n                                </Button>\r\n                                {/* <Button onClick={()=>BlockCategory} style={{backgroundColor:\"#696969\"}} >Manage</Button> */}\r\n                                <Button\r\n                                  className=\"DeleteButton\"\r\n                                  onClick={() => DeleteUser(category._id)}\r\n                                  style={\r\n                                    {\r\n                                      // border: \"1.5px solid #c4c4c4\",\r\n                                      // margin: \"0.5rem\",\r\n                                      // color: \"#696969\",\r\n                                    }\r\n                                  }\r\n                                >\r\n                                  <Tooltip title={<span style={{ fontSize: \"16px\" }}>Delete User</span>} arrow>\r\n                                    <DeleteOutline />\r\n                                  </Tooltip>\r\n                                </Button>\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          )})}\r\n                      </TableBody>\r\n                \r\n\r\n                    </Table>\r\n                 \r\n                  </TableContainer>\r\n                  {tableData.length === 0 ? (\r\n                    <NoDataFound TextToDisplay=\"No Data Found.\" fontSize=\"24px\" Loading={isLoading} />\r\n                  ) : (\r\n                    false\r\n                  )}\r\n                       \r\n                       <TablePagination\r\n                  style={{position:\"fixed\",bottom:4,backgroundColor:\"white\",right:27}}\r\n                    key={limit}\r\n                    rowsPerPageOptions={totalUserListCount >= 100 ? [10, 25, 100] : totalUserListCount > 10 ? [10, 25] : [10]}\r\n                    component=\"div\"\r\n                    count={totalUserListCount}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onPageChange={handleChangePage}\r\n                    onRowsPerPageChange={handleChangeRowsPerPage}\r\n                  />\r\n                  {/* <ReactPaginate\r\n                    breakLabel=\"...\"\r\n                    nextLabel=\"next >\"\r\n                    onPageChange={handlePageClick}\r\n                    pageRangeDisplayed={5}\r\n                    pageCount={1}\r\n                    previousLabel=\"< previous\"\r\n                    renderOnZeroPageCount={null}\r\n                  /> */}\r\n                  {/* <div className=\"d-flex\">\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      className=\"buttoncss mx-3\"\r\n                      style={{ backgroundColor: \"#0059cd\", color: \"#fff\" }}\r\n                      onClick={() => {\r\n                        setPageNumber((pagenum) => pagenum - 1);\r\n                      }}\r\n                    >\r\n                      Previous Page\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      className=\"buttoncss mx-3\"\r\n                      style={{ backgroundColor: \"#0059cd\", color: \"#fff\" }}\r\n                      onClick={() => {\r\n                        setPageNumber((pagenum) => pagenum + 1);\r\n                      }}\r\n                    >\r\n                      Next Page\r\n                    </Button>\r\n                  </div> */}\r\n                </Paper>\r\n              </div>\r\n            </div>\r\n          </Paper>\r\n        </div>\r\n        <Dialog\r\n          open={open}\r\n          // onClose={handleClose}\r\n\r\n          fullWidth={true}\r\n        >\r\n          <DialogTitle style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <h4 className=\"\"></h4>\r\n          </DialogTitle>\r\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            {/* <img\r\n              src={imageUrl}\r\n              alt=\"...\"\r\n              style={{ width: \"50px\", height: \"50px\" }}\r\n            /> */}\r\n          </div>\r\n          <Close\r\n            onClick={() => setOpen(false)}\r\n            style={{\r\n              position: \"absolute\",\r\n              right: \"5\",\r\n              top: \"5\",\r\n              cursor: \"pointer\",\r\n              color: \"white\",\r\n              backgroundColor: \"red\",\r\n              borderRadius: \"50%\",\r\n            }}\r\n          />\r\n          <DialogContent>\r\n            {/* <DialogContentText > */}\r\n\r\n            <div>\r\n              <Formik\r\n                // validationSchema={validationSchema}\r\n                initialValues={{\r\n                  // email:\"\",\r\n                  // name: get(editData[0], \"calendar_name\", \"\"),\r\n                  business_name: get(UserCategoryData, \"business.name\", \"N/A\"),\r\n                  business_phone: get(UserCategoryData, \"business.phoneNumber\", \"N/A\"),\r\n                  business_email: get(UserCategoryData, \"business.email\", \"N/A\"),\r\n                  business_address: get(UserCategoryData, \"business.address\", \"N/A\"),\r\n                }}\r\n                // onSubmit={(values) => {\r\n                //   if (editData.length > 1) {\r\n                //     valuesEditedCalender(values);\r\n                //   } else {\r\n                //     valuesSubmit(values);\r\n                //   }\r\n                // }}\r\n              >\r\n                {({ values, setFieldValue }) => (\r\n                  <Form>\r\n                    <br />\r\n                    <div className=\"container\">\r\n                      <div className=\"row\">\r\n                        {\" \"}\r\n                        <div className=\"col-4\">\r\n                          <label className=\"\" style={{}}>\r\n                            Business Name : &nbsp;\r\n                          </label>\r\n                        </div>\r\n                        <div className=\"col-4\">\r\n                          <Field\r\n                            className=\"\"\r\n                            name=\"business_name\"\r\n                            // variant=\"outlined\"\r\n                            type=\"text\"\r\n                            // inputProps={{name: \"name\"}}\r\n                            autoComplete=\"off\"\r\n                            style={{\r\n                              width: 300,\r\n                              height: 35,\r\n                              borderRadius: 5,\r\n                              borderColor: \"#d3d3d3\",\r\n                              borderStyle: \"solid\",\r\n                              borderWidth: 1,\r\n                              paddingInlineStart: 10,\r\n                            }}\r\n                            readOnly\r\n                          />\r\n                          {/* <KErrorMessage name=\"name\" /> */}\r\n                        </div>\r\n                      </div>\r\n                      <br />\r\n                      <div className=\"row\">\r\n                        <div className=\"col-4\">\r\n                          <label className=\"\" style={{}}>\r\n                            Business Phone Number : &nbsp;\r\n                          </label>\r\n                        </div>\r\n                        <div className=\"col-4\">\r\n                          <Field\r\n                            className=\"\"\r\n                            name=\"business_phone\"\r\n                            // variant=\"outlined\"\r\n                            type=\"text\"\r\n                            // inputProps={{name: \"name\"}}\r\n                            autoComplete=\"off\"\r\n                            style={{\r\n                              width: 300,\r\n                              height: 35,\r\n                              borderRadius: 5,\r\n                              borderColor: \"#d3d3d3\",\r\n                              borderStyle: \"solid\",\r\n                              borderWidth: 1,\r\n                              paddingInlineStart: 10,\r\n                            }}\r\n                            readOnly\r\n                          />\r\n                          {/* <KErrorMessage name=\"upload\" /> */}\r\n                        </div>\r\n                      </div>\r\n                      <br />\r\n                      <div className=\"row\">\r\n                        <div className=\"col-4\">\r\n                          <label className=\"\" style={{}}>\r\n                            Business Email Id : &nbsp;\r\n                          </label>\r\n                        </div>\r\n                        <div className=\"col-4\">\r\n                          <Field\r\n                            className=\"\"\r\n                            name=\"business_email\"\r\n                            // variant=\"outlined\"\r\n                            type=\"text\"\r\n                            // inputProps={{name: \"name\"}}\r\n                            autoComplete=\"off\"\r\n                            style={{\r\n                              width: 300,\r\n                              height: 35,\r\n                              borderRadius: 5,\r\n                              borderColor: \"#d3d3d3\",\r\n                              borderStyle: \"solid\",\r\n                              borderWidth: 1,\r\n                              paddingInlineStart: 10,\r\n                            }}\r\n                            readOnly\r\n                          />\r\n                          {/* <KErrorMessage name=\"upload\" /> */}\r\n                        </div>\r\n                      </div>\r\n                      <br />\r\n                      <div className=\"row\">\r\n                        <div className=\"col-4\">\r\n                          <label className=\"\" style={{}}>\r\n                            Business Address : &nbsp;\r\n                          </label>\r\n                        </div>\r\n                        <div className=\"col-4\">\r\n                          <Field\r\n                            className=\"\"\r\n                            name=\"business_address\"\r\n                            // variant=\"outlined\"\r\n                            type=\"text\"\r\n                            // inputProps={{name: \"name\"}}\r\n                            autoComplete=\"off\"\r\n                            style={{\r\n                              width: 300,\r\n                              height: 35,\r\n                              borderRadius: 5,\r\n                              borderColor: \"#d3d3d3\",\r\n                              borderStyle: \"solid\",\r\n                              borderWidth: 1,\r\n                              paddingInlineStart: 10,\r\n                            }}\r\n                            readOnly\r\n                          />\r\n                          {/* <KErrorMessage name=\"upload\" /> */}\r\n                        </div>\r\n                      </div>\r\n                      <br />\r\n                      <br />\r\n                      <div className=\"text-center\">\r\n                        {/* <Button\r\n                          type=\"submit\"\r\n                          variant=\"contained\"\r\n                          className=\"buttoncss\"\r\n                          style={{ backgroundColor: \"#0e3f37\", color: \"#fff\" }}\r\n                        >\r\n                          Add Calendar\r\n                        </Button> */}\r\n                      </div>\r\n                    </div>\r\n                  </Form>\r\n                )}\r\n              </Formik>\r\n            </div>\r\n            {/* </DialogContentText> */}\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n      {/* {isLoading && (\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            width: \"100vw\",\r\n            height: \"100vh\",\r\n            top: 0,\r\n            left: 0,\r\n            zIndex: 1400,\r\n            background: \"#0003\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <PuffLoader\r\n            color=\"#0059cd\"\r\n            loading={isLoading}\r\n            size={100}\r\n            // aria-label=\"Loading Spinner\"\r\n            // data-testid=\"loader\"\r\n          />\r\n        </div>\r\n      )} */}\r\n    </React.Fragment>\r\n  );\r\n}\r\n"],"sourceRoot":""}